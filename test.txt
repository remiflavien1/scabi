The dependencies for <django> are :
... pytz
... sqlparse
... asgiref
... argon2-cffi
... bcrypt

>>>>>>>>>>>>>>> SEARCH IN OSS INDEX <<<<<<<<<<<<<<<

-------------- Package: <pytz> --------------
NO VULNERABILITIES FOUND

-------------- Package: <sqlparse> --------------
NO VULNERABILITIES FOUND

-------------- Package: <asgiref> --------------
NO VULNERABILITIES FOUND

-------------- Package: <argon2-cffi> --------------
NO VULNERABILITIES FOUND

-------------- Package: <bcrypt> --------------
NO VULNERABILITIES FOUND

>>>>>>>>>>>>>>> SEARCH IN MITRE DATABASE <<<<<<<<<<<<<<<

-------------- Package: <pytz> --------------
NO VULNERABILITIES FOUND

-------------- Package: <sqlparse> --------------
NO VULNERABILITIES FOUND

-------------- Package: <asgiref> --------------
NO VULNERABILITIES FOUND

-------------- Package: <argon2-cffi> --------------
NO VULNERABILITIES FOUND

-------------- Package: <bcrypt> --------------

CVE : CVE-2020-5229
CVE DETAIL https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5229
DESCRIPTION Opencast before 8.1 stores passwords using the rather outdated and cryptographically insecure MD5 hash algorithm. Furthermore, the hashes are salted using the username instead of a random salt, causing hashes for users with the same username and password to collide which is problematic especially for popular users like the default `admin` user. This essentially means that for an attacker, it might be feasible to reconstruct a user's password given access to these hashes. Note that attackers needing access to the hashes means that they must gain access to the database in which these are stored first to be able to start cracking the passwords. The problem is addressed in Opencast 8.1 which now uses the modern and much stronger bcrypt password hashing algorithm for storing passwords. Note, that old hashes remain MD5 until the password is updated. For a list of users whose password hashes are stored using MD5, take a look at the `/user-utils/users/md5.json` REST endpoint.


CVE : CVE-2019-13421
CVE DETAIL https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13421
DESCRIPTION Search Guard versions before 23.1 had an issue that an administrative user is able to retrieve bcrypt password hashes of other users configured in the internal user database.


CVE : CVE-2017-15536
CVE DETAIL https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15536
DESCRIPTION An issue was discovered in Cloudera Data Science Workbench (CDSW) 1.x before 1.2.0. Several web application vulnerabilities allow malicious authenticated users of CDSW to escalate privileges in CDSW. CDSW users can exploit these vulnerabilities in combination to gain root access to CDSW nodes, gain access to the CDSW database which includes Kerberos keytabs of CDSW users and bcrypt hashed passwords, and gain access to other privileged information such as session tokens, invitation tokens, and environment variables.


CVE : CVE-2015-3454
CVE DETAIL https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3454
DESCRIPTION TelescopeJS before 0.15 leaks user bcrypt password hashes in websocket messages, which might allow remote attackers to obtain password hashes via a cross-site scripting attack.


CVE : CVE-2015-0886
CVE DETAIL https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0886
DESCRIPTION Integer overflow in the crypt_raw method in the key-stretching implementation in jBCrypt before 0.4 makes it easier for remote attackers to determine cleartext values of password hashes via a brute-force attack against hashes associated with the maximum exponent.


CVE : CVE-2013-1895
CVE DETAIL https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1895
DESCRIPTION The py-bcrypt module before 0.3 for Python does not properly handle concurrent memory access, which allows attackers to bypass authentication via multiple authentication requests, which trigger the password hash to be overwritten.


save format : test not supported for the moment
